openapi: 3.0.3
info:
  # Заголвоок
  title: Swagger Petstore - OpenAPI 3.0
  # Опсиание
  description: |-
    This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

    _If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_

    Some useful links:
    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  # Url адрес на котором используеться API
  termsOfService: http://swagger.io/terms/
  # Контактная информация для открытого API.
  contact:
    email: apiteam@swagger.io
  # Версия для нашего API
  version: 1.0.11

# Список путей
paths:
  # Имя пути
  /listproduct:
    # Обработка метода GET
    get:
      # Описание пути
      summary: Метод получения списка товаров
      # К какому тегу пренадлежит путь
      tags:
        - Product
      # ??
      operationId: getListProduct
      # Структура ответа
      responses:
        # HTTP код ответа
        "200":
          # Опсиание ответа для данного кода
          description: "Успешный ответ со списком товаров"
          # Схема ответа
          content:
            # HTTP тип ответа
            application/json:
              # Ссылаемся на переиспользуемую схему
              schema:
                $ref: "#/components/schemas/ManyProduct"
        "default":
          description: "Любой другой ответ"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    # Обработка метода POST
    post:
      summary: Добавить товар
      tags:
        - Product
      operationId: createProduct
      # Структура POST запроса от клиента
      requestBody:
        # Условия обезательности заполнения
        required: true
        content:
          # HTTP тип ответа
          application/json:
            # Схема POST запроса от клиента
            schema:
              $ref: "#/components/schemas/OneProduct"
      responses:
        "200":
          $ref: "#/components/responses/GetProductsOk"

  /getproduct/{product_id}:
    get:
      summary: Метод получения товара по ID
      # Конфигурация входных параметров
      parameters:
        # Имя параметра
        - name: product_id
          # Где он передаеться ["query","header","path","cookie"]
          in: path
          # Указать обязательность
          required: true
          # Описание параметра
          description: Идентификатор игрушки
          # Схема параметра
          schema:
            type: number
          # Пример значений для параметра
          example: "123"
      tags:
        - Product
      operationId: getProductById
      responses:
        "200":
          description: "Успешный ответ со списком товаров"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ManyProduct"
    # Обработка метода DELETE
    delete:
      summary: Удаление товара по ID
      tags:
        - Product
      parameters:
        - $ref: "#/components/parameters/ProductId"
      responses:
        "200":
          $ref: "#/components/responses/GetOneProductOk"

# Тут хранясья все переиспользуемые схемы/ответы/и тд.
components:
  # Входные параметры
  parameters:
    ProductId:
      # Имя параметра
      name: product_id
      # Где он передаеться ["query","header","path","cookie"]
      in: path
      # Указать обязательность
      required: true
      # Описание параметра
      description: Идентификатор игрушки
      # Схема параметра
      schema:
        type: number
      # Пример значений для параметра
      example: "123"

  # HTTP ответы
  responses:
    GetProductsOk:
      description: "Успешный ответ со списком товаров"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ManyProduct"
    GetProductOkDefault:
      description: "Любой другой ответ"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    GetOneProductOk:
      description: "Успешный ответ со списком товаров"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ManyProduct"

  # JSON Схемы
  schemas:
    # Имя схемы
    OneProduct:
      # Тип данных
      type: object
      # Все ключи
      properties:
        # Имя ключа
        type_many:
          # Тип ключа
          type: string
          # Доступные значения
          enum:
            - "руб"
            - "usd"
          # Прмиер значения у ключа
          example: "руб"
          # Опсиание ключа
          description: "В какой валюте указан стоимость товара"
        name:
          type: string
          example: "Телефон"
        cost:
          type: number
          example: "1000"
      # Обезательные ключи
      required:
        # Имя ключа
        - name
        - cost
    ManyProduct:
      type: array
      # Ссылка на другую схему
      items:
        $ref: "#/components/schemas/OneProduct"
    Error:
      type: object
      properties:
        code:
          type: number
          description: "Внутренний код ошибки"
          example: "202"
        message:
          type: string
          description: "Текстовое описание ошибки"
          example: "Сервер не доступен"
